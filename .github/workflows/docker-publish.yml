name: CI/CD1

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU 
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/free-flats-bot:latest
  deploy-to-vm:
            needs: build-and-push
            runs-on: ubuntu-latest
            if: github.ref == 'refs/heads/main'
        
            steps:
              - uses: actions/checkout@v3
        
              - name: Start SSH-agent
                uses: webfactory/ssh-agent@v0.5.4
                with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
              - name: Copy compose + .env to VM
                run: |
                  scp -o StrictHostKeyChecking=no \
                      docker-compose.yml .env \
                      ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/free-flats-bot/
        
              - name: Deploy via docker-compose
                run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} <<EOF
                    cd ~/free-flats-bot
        
                    # логинимся в GHCR напрямую, подставляя секрет и логин на этапе запуска
                    echo "${{ secrets.GHCR_PAT }}" \
                      | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        
                    # подтягиваем и перезапускаем сервис
                    docker-compose pull free-flats-bot
                    docker-compose up -d free-flats-bot
        
                    # чистим dangling images
                    docker image prune -f
                  EOF
                
        

